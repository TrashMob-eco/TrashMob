@*TODO: move to css style sheets*@
<style>
    .tm-my-event-list {
        height: 100%;
        padding: 20px;
    }

        .tm-my-event-list .tm-loader {
            top: 50%;
            position: fixed;
        }

        .tm-my-event-list .tm-event-card {
            margin-top: 10px;
        }

        .tm-my-event-list .tm-create-event-btn-bottom {
            position: fixed;
            bottom: 10px;
            right: 10px;
        }

        .tm-my-event-list .tm-create-event-btn-center {
            margin-top: 20px;
        }

        .tm-my-event-list .tm-no-event-container {
            text-align: center;
        }
</style>


<ErrorBoundary>
    <ChildContent>
        <MudButton Color="ComponentCommon.PrimaryColor" OnClick="@(() => OnViewMapAllEvents(_myEvents))">Show Map View</MudButton>
        <MudContainer Class="tm-my-event-list">
            <MudOverlay @bind-Visible="_isLoading" Absolute>
                <MudProgressCircular Color="ComponentCommon.DefaultColor" Indeterminate Class="tm-loader" />
            </MudOverlay>
            <MudStack Style="width: 100%" Row>
                <MudChip Style="margin-left: 2px"
                         Icon="@(_currentSelectedChip == EventActionGroup.OWNER ? Icons.Material.Filled.Check : string.Empty)"
                         Variant="ComponentCommon.MudChipVariant"
                         OnClick="@OnOwningEventsFilterAsync"
                         Color="ComponentCommon.PrimaryColor">Created by me</MudChip>
                <MudChip Icon="@(_currentSelectedChip == EventActionGroup.ATTENDING ? Icons.Material.Filled.Check : string.Empty)"
                         Variant="ComponentCommon.MudChipVariant"
                         OnClick="@OnAttendingEventsFilterAsync"
                         Color="ComponentCommon.PrimaryColor">Attending</MudChip>
                <MudChip Style="margin-left: 2px"
                         Icon="@(_currentSelectedChip == EventActionGroup.PAST_EVENTS ? Icons.Material.Filled.Check : string.Empty)"
                         Variant="ComponentCommon.MudChipVariant"
                         OnClick="@OnPastEventsFilterAsync"
                         Color="ComponentCommon.PrimaryColor">Past events</MudChip>
            </MudStack>
            <MudStack Style="width: 100%" Row>
                <MudTextField T="string" FullWidth Adornment="@Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Placeholder="Search event.." Text="@_eventSearchText" TextChanged="@OnSearchTextChanged" Immediate />
            </MudStack>
            @if (_currentSelectedChip != EventActionGroup.PAST_EVENTS)
            {
                <MudStack>
                    <MudSwitch T="bool" Checked="StateInformation.ShowFutureEvents" CheckedChanged="OnShowFutureEventsChangedAsync" Color="ComponentCommon.PrimaryColor" Label="Show future events only" />
                </MudStack>
            }
            @if (_myEvents.Any())
            {
                <MudVirtualize Context="mob" Items="_myEvents">
                    <MudCard Class="tm-event-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack>
                                    <MudChip Variant="ComponentCommon.MudChipVariant"
                                         Style="width: fit-content"
                                         Color="ComponentCommon.PrimaryColor">@(DoesUserOwnEvent(mob) ? "Owner" : "Attendee")</MudChip>
                                        <MudText Typo="Typo.subtitle2">@mob.Name</MudText>
                                    </MudStack>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    @if (mob.IsEventLead() && mob.IsCancellable())
                                    {
                                        <MudMenuItem Icon="@Icons.Material.Filled.Cancel" IconSize="Size.Small" OnClick="@(() => OnCancelEvent(mob))">Cancel Event</MudMenuItem>
                                    }
                                </MudMenu>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2"><strong>Address: </strong>@mob.GetFormattedAddress()</MudText>
                                <MudText Typo="Typo.body2"><strong>Event date: </strong>@mob.EventDate.GetFormattedLocalDate()</MudText>
                                <MudText Typo="Typo.body2"><strong>Event time: </strong>@mob.EventDate.GetFormattedLocalTime()</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudStack Style="@ComponentCommon.FullWidth" Row Justify="@Justify.SpaceBetween">
                                    <MudStack Row>
                                        <MudButton Color="@ComponentCommon.PrimaryColor"
                                           Variant="@ComponentCommon.CardButtonVariant"
                                           OnClick="@(() => OnViewEventDetails(mob))">View</MudButton>
                                        @{
                                        EventActionType cardAction = DetermineUserCardAction(mob);
                                    }
                                    @if (cardAction == EventActionType.SUBMIT_SUMMARY)
                                    {
                                        <MudButton Color="@ComponentCommon.PrimaryColor"
                                           Variant="@ComponentCommon.CardButtonVariant"
                                           OnClick="@(() => OnCompleteEvent(mob))">Submit Summary</MudButton>
                                    }
                                    else if (cardAction == EventActionType.MANAGE)
                                    {
                                        <MudButton Color="@ComponentCommon.PrimaryColor"
                                           Variant="@ComponentCommon.CardButtonVariant"
                                           OnClick="@(() => OnEdit(mob))">Manage</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Color="@ComponentCommon.PrimaryColor"
                                           OnClick="@(() => OnViewEventSummary(mob))"
                                           Variant="@ComponentCommon.CardButtonVariant">View Summary</MudButton>
                                    }
                                </MudStack>
                                <MudStack Row>
                                    <MudIconButton Icon="@Icons.Material.Filled.Map"
                                               Color="ComponentCommon.PrimaryColor"
                                               OnClick="@(() => OnViewMap(mob))" />
                                </MudStack>
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudVirtualize>
            }
            <MudFab Class="tm-create-event-btn-bottom" StartIcon="@Icons.Material.Filled.Edit" Color="ComponentCommon.PrimaryColor" Label="Create" OnClick="@OnCreateEvent" />
        </MudContainer>
    </ChildContent>
    <ErrorContent>
        @context.Message
    </ErrorContent>
</ErrorBoundary>