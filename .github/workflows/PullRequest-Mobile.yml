# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: TrashMob Mobile App Pull Request Build

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/**'
      - 'TrashMob.Models/**'
      - 'TrashMobMobile/**'
      - 'TrashMobMobileApp.sln'

env:
  DOTNET_VERSION: '8.0.x'   # set this to the dotnet version to use
  DOTNET_VERSION2: '8.0.x'  # set this to the dotnet version to use
  CONFIGURATION: Debug      # Values: Debug, Release
  ENVIRONMENT: test         # Values: test, production
  IOS_BUNDLE_ID: 'eco.trashmobdev.trashmobmobile'   # Values: 'eco.trashmobdev.trashmobmobile', 'eco.trashmob'
  IOS_PROFILE_TYPE: 'IOS_APP_DEVELOPMENT'           # Values: 'IOS_APP_DEVELOPMENT', 'IOS_APP_STORE'


jobs:
  generate-build-number:
    runs-on: ubuntu-latest
    outputs:
      buildNumber: ${{ steps.set_build_number.outputs.buildNumber }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Generate build number
        id: set_build_number
        run: |
          commitHash=$(git rev-parse HEAD)
          hexBuildNumber=${commitHash: -8}

          # Convert hexadecimal to uppercase
          hexBuildNumber=$(echo "$hexBuildNumber" | tr '[:lower:]' '[:upper:]')

          # Convert from hexadecimal to decimal
          buildNumber=$(echo "ibase=16; $hexBuildNumber" | bc)
          echo "Decimal Build Number based on Commit ID: $buildNumber"

          echo "buildNumber=$buildNumber" >> $GITHUB_ENV
          echo "buildNumber=$buildNumber" >> $GITHUB_OUTPUT

  exposeEnvironmentVariables:
    runs-on: ubuntu-latest
    name: Expose environment variables
    outputs:
      configuration: ${{ steps.expose_environment_variables.outputs.configuration }}
      bundle_id: ${{ steps.expose_environment_variables.outputs.bundle_id }}
      dotnet_version: ${{ steps.expose_environment_variables.outputs.dotnet_version }}
      ios_provisioning_profile_type: ${{ steps.expose_environment_variables.outputs.ios_provisioning_profile_type }}
    steps:
      - name: Set environment variable outputs
        id: expose_environment_variables
        run: |
          echo "configuration=${{ env.CONFIGURATION }}" >> $GITHUB_ENV
          echo "configuration=${{ env.CONFIGURATION }}" >> $GITHUB_OUTPUT
          echo "bundle_id=${{ env.IOS_BUNDLE_ID }}" >> $GITHUB_ENV
          echo "bundle_id=${{ env.IOS_BUNDLE_ID }}" >> $GITHUB_OUTPUT
          echo "dotnet_version=${{ env.DOTNET_VERSION }}" >> $GITHUB_ENV
          echo "dotnet_version=${{ env.DOTNET_VERSION }}" >> $GITHUB_OUTPUT
          echo "ios_provisioning_profile_type=${{ env.IOS_PROFILE_TYPE }}" >> $GITHUB_ENV
          echo "ios_provisioning_profile_type=${{ env.IOS_PROFILE_TYPE }}" >> $GITHUB_OUTPUT

  buildAndroidApp:
    needs: generate-build-number
    runs-on: windows-latest
    environment: test
    name: Android Build

    steps:
    - uses: actions/checkout@v3

    - name: Use build number
      run: |
        $buildNumber=${{ needs.generate-build-number.outputs.buildNumber }}
        echo "Build Number: $buildNumber"

    - name: Update Build Number
      run: |
        $content = Get-Content TrashMobMobile/TrashMobMobile.csproj -Raw

        $newContent = $content -replace '<ApplicationVersion>.*</ApplicationVersion>', "<ApplicationVersion>$buildNumber</ApplicationVersion>"

        Set-Content TrashMobMobile/TrashMobMobile.csproj -Value $newContent

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup DotNet ${{ env.DOTNET_VERSION2 }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION2 }}

    - name: Install MAUI Workload
      run: |
        dotnet nuget locals all --clear
        dotnet workload install maui --ignore-failed-sources
        dotnet workload install android maui wasm-tools --source https://api.nuget.org/v3/index.json

    - name: Restore Dependencies
      run: |
        dotnet restore TrashMobMobileApp.sln

    - name: Publish Android Mobile App
      run: |
        dotnet publish TrashMobMobile/TrashMobMobile.csproj -c:${{ env.CONFIGURATION }} -f:net8.0-android --no-restore /p:AndroidPackageFormat="aab"

    # Store Android Signing Keystore and password in Secrets using base64 encoding
    # https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil
    # command line util to encode to base64 on windows
    - name: Extract Android signing key from env
      shell: bash
      run: |
        cd TrashMobMobile
        mkdir android
        echo "${{ secrets.ANDROID_KEYSTORE }}" > android/trashmobmobileapp.jks.base64
        base64 -d android/trashmobmobileapp.jks.base64 > android/trashmobmobileapp.decrypted.jks
    # check android SDK paths etc in installed VM : https://github.com/actions/virtual-environments#available-environments
    - name: Sign dev build
      shell: bash
      run: |
        cd TrashMobMobile
        jarsigner -keystore android/trashmobmobileapp.decrypted.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" -signedjar bin/${{ env.CONFIGURATION }}/net8.0-android/publish/eco.trashmob.trashmobmobileapp-Signed.aab bin/${{ env.CONFIGURATION }}/net8.0-android/publish/eco.trashmob.trashmobmobileapp.aab key

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: artifacts-android
        path: |
          TrashMobMobile\bin\${{ env.CONFIGURATION }}\net8.0-android\publish\*.aab

  calliOSBuild:
    needs: [generate-build-number, exposeEnvironmentVariables]
    uses: ./.github/workflows/build-ios.yml
    with:
      configuration: ${{ needs.exposeEnvironmentVariables.outputs.configuration }}
      build_number: ${{ needs.generate-build-number.outputs.buildNumber }}
      bundle_id: ${{ needs.exposeEnvironmentVariables.outputs.bundle_id }}
      dotnet_version: ${{ needs.exposeEnvironmentVariables.outputs.dotnet_version }}
      ios_provisioning_profile_type: ${{ needs.exposeEnvironmentVariables.outputs.ios_provisioning_profile_type }}
    secrets:
      ios_signing_certificate: ${{ secrets.IOS_CERTIFICATES_P12 }}
      ios_signing_certificate_password: ${{ secrets.IOS_CERTIFICATES_P12_PASSWORD }}
      apple_issuer_id: ${{ secrets.APPSTORE_ISSUER_ID }}
      apple_key_id: ${{ secrets.APPSTORE_KEY_ID }}
      apple_key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  # buildiOSApp:
  #   needs: generate-build-number
  #   runs-on: macos-13
  #   environment: test
  #   name: iOS Build

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Use build number
  #     run: |
  #       buildNumber=${{ needs.generate-build-number.outputs.buildNumber }}
  #       echo "Build Number: $buildNumber"

  #   - name: Update Build Number
  #     run: sed -i '' "s|<ApplicationVersion>.*</ApplicationVersion>|<ApplicationVersion>$buildNumber</ApplicationVersion>|g" TrashMobMobile/TrashMobMobile.csproj

  #   - name: Update Bundle ID
  #     run: sed -i '' "s|<ApplicationId>.*</ApplicationId>|<ApplicationId>${{ env.IOS_BUNDLE_ID }}</ApplicationId>|g" TrashMobMobile/TrashMobMobile.csproj

  #   - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}

  #   - name: Setup DotNet ${{ env.DOTNET_VERSION2 }} Environment
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION2 }}

  #   - name: Install MAUI Workload
  #     run: |
  #       dotnet nuget locals all --clear
  #       dotnet workload install maui --ignore-failed-sources
  #       dotnet workload install ios maui wasm-tools --source https://api.nuget.org/v3/index.json --ignore-failed-sources

  #   - name: Set XCode Version
  #     if: runner.os == 'macOS'
  #     shell: bash
  #     run: |
  #       sudo xcode-select -s "/Applications/Xcode_15.1.app"
  #       echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_15.1.app" >> $GITHUB_ENV

  #   - name: Import Code-Signing Certificates
  #     uses: Apple-Actions/import-codesign-certs@v1
  #     with:
  #       p12-file-base64: ${{ secrets.IOS_CERTIFICATES_P12 }}
  #       p12-password: ${{ secrets.IOS_CERTIFICATES_P12_PASSWORD }}

  #   - name: Download Apple Provisioning Profiles
  #     uses: Apple-Actions/download-provisioning-profiles@v1
  #     with:
  #       bundle-id: ${{ env.IOS_BUNDLE_ID }}
  #       profile-type: ${{ env.IOS_PROFILE_TYPE }}
  #       issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #       api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
  #       api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

  #   - name: Build MAUI iOS
  #     run: dotnet publish TrashMobMobile/TrashMobMobile.csproj -c ${{ env.CONFIGURATION }} -f net8.0-ios -r ios-arm64 --self-contained /p:buildForSimulator=False /p:packageApp=True /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=true /p:PublishTrimmed=true

  #   - name: Check Artifact paths
  #     shell: bash
  #     run: |
  #       pwd
  #       #ls TrashMobMobile/bin/Debug/net8.0-ios/ios-arm64/publish//TrashMobMobileApp.ipa
  #       #ls /Users/runner/work/TrashMob/TrashMob/TrashMobMobile/bin/Debug/net8.0-ios/ios-arm64/publish//TrashMobMobileApp.ipa
  #       #ls /Users/runner/work/TrashMob/TrashMob/TrashMobMobile/bin/Debug/net8.0-ios/ios-arm64/*
  #       #ls /Users/runner/work/TrashMob/TrashMob/TrashMobMobile/bin/Debug/net8.0-ios/ios-arm64/publish/*
  #       #ls **/*.ipa

  #   - name: Upload iOS Artifact
  #     uses: actions/upload-artifact@v3.1.2
  #     with:
  #       name: trashmobmobileapp-ios-pr-build
  #       path: TrashMobMobile/bin/${{ env.CONFIGURATION }}/net8.0-ios/ios-arm64/publish//*.ipa
